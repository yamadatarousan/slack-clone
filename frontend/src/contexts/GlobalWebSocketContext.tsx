import React, { createContext, useContext, useEffect, useRef } from 'react';
import { useAuth } from '../hooks/useAuth';
import { useNotifications } from './NotificationContext';
import { websocketService } from '../services/websocket';
import { WebSocketMessage } from '../types';

interface GlobalWebSocketContextType {
  // ÂøÖË¶Å„Å´Âøú„Åò„Å¶ËøΩÂä†
}

const GlobalWebSocketContext = createContext<GlobalWebSocketContextType | undefined>(undefined);

// Unified mention detection function (same logic as MentionText component)
const checkIfUserMentioned = (content: string, user: any): boolean => {
  if (!user) return false;
  
  // Match @username or @"display name" patterns
  const mentionRegex = /@(\w+|"[^"]+"|'[^']+')/g;
  let match;
  
  while ((match = mentionRegex.exec(content)) !== null) {
    // Extract username (remove quotes if present)
    let username = match[1];
    if ((username.startsWith('"') && username.endsWith('"')) || 
        (username.startsWith("'") && username.endsWith("'"))) {
      username = username.slice(1, -1);
    }
    
    // Check if this mention matches current user
    if (username === user.username || 
        (user.display_name && username === user.display_name)) {
      return true;
    }
  }
  
  return false;
};

interface GlobalWebSocketProviderProps {
  children: React.ReactNode;
}

export function GlobalWebSocketProvider({ children }: GlobalWebSocketProviderProps) {
  const { user } = useAuth();
  const { addNotification, showBrowserNotification, playNotificationSound } = useNotifications();
  const isConnected = useRef(false);
  const reconnectTimer = useRef<NodeJS.Timeout>();

  useEffect(() => {
    if (!user) {
      // „É¶„Éº„Ç∂„Éº„Åå„É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„ÅüÂ†¥Âêà„ÅØÂàáÊñ≠
      websocketService.disconnect();
      isConnected.current = false;
      return;
    }

    connectGlobalWebSocket();

    return () => {
      if (reconnectTimer.current) {
        clearTimeout(reconnectTimer.current);
      }
      websocketService.disconnect();
      isConnected.current = false;
    };
  }, [user]);

  const connectGlobalWebSocket = async () => {
    if (!user || isConnected.current) return;

    try {
      console.log('üåê Connecting global WebSocket for user:', user.id, user.username);
      
      // Êó¢Â≠ò„ÅÆÊé•Á∂ö„Çí„ÇØ„É™„Ç¢
      websocketService.disconnect();
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // WebSocketÊé•Á∂ö„ÇíÁ¢∫Á´ã
      await websocketService.connect(user.id.toString());
      isConnected.current = true;
      
      console.log('‚úÖ Global WebSocket connected successfully');
      
      // „Ç∞„É≠„Éº„Éê„É´„É°„ÉÉ„Çª„Éº„Ç∏„Éè„É≥„Éâ„É©„Éº„ÇíÁôªÈå≤
      const unsubscribe = websocketService.onMessage(handleGlobalMessage);
      
      // „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÈñãÂßã
      startHealthCheck();
      
      return unsubscribe;
      
    } catch (error) {
      console.error('‚ùå Global WebSocket connection failed:', error);
      isConnected.current = false;
      
      // 5ÁßíÂæå„Å´ÂÜçÊé•Á∂ö„ÇíË©¶Ë°å
      reconnectTimer.current = setTimeout(() => {
        connectGlobalWebSocket();
      }, 5000);
    }
  };

  const handleGlobalMessage = (message: WebSocketMessage) => {
    console.log('üåê Global message handler called:', {
      messageType: message.type,
      messageChannelId: message.channel_id,
      messageSenderId: message.user_id,
      currentUserId: user?.id
    });

    // „É°„ÉÉ„Çª„Éº„Ç∏„Çø„Ç§„Éó„ÅÆÂ†¥Âêà„ÅÆ„ÅøÂá¶ÁêÜÔºàÈÄöÁü•„ÅÆ„Åø„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫„ÅØChatRoom„ÅåÊãÖÂΩìÔºâ
    if (message.type === 'message') {
      // ‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„Åã„Çâ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„Åã„ÉÅ„Çß„ÉÉ„ÇØ
      const isFromOtherUser = message.user_id !== user?.id?.toString();
      
      console.log('üåê GlobalWebSocketProvider: Processing message for notifications only');
      
      if (isFromOtherUser) {
        const senderName = message.sender_name || `„É¶„Éº„Ç∂„Éº${message.user_id}`;
        
        // „É°„É≥„Ç∑„Éß„É≥Ê§úÂá∫
        const isMentioned = user && checkIfUserMentioned(message.content, user);
        
        console.log('üåê Processing global message:', {
          content: message.content,
          sender: senderName,
          channelId: message.channel_id,
          isMentioned,
          currentUser: user?.username
        });

        if (isMentioned) {
          // „É°„É≥„Ç∑„Éß„É≥ÈÄöÁü•„ÇíË°®Á§∫Ôºà„ÉÅ„É£„É≥„Éç„É´ÊÉÖÂ†±„ÇÇÂê´„ÇÅ„ÇãÔºâ
          const channelName = `„ÉÅ„É£„É≥„Éç„É´ ${message.channel_id}`;
          
          console.log('üîî Showing global mention notification');
          
          // „Éñ„É©„Ç¶„Ç∂ÈÄöÁü•
          showBrowserNotification(
            `üí¨ „É°„É≥„Ç∑„Éß„É≥ - #${channelName}`,
            `${senderName}: ${message.content}`,
            {
              tag: `global-mention-${message.channel_id}-${Date.now()}`,
              renotify: true,
              requireInteraction: true,
              icon: '/favicon.ico'
            }
          );

          // Èü≥Â£∞ÈÄöÁü•
          playNotificationSound(true);

          // „Ç¢„Éó„É™ÂÜÖÈÄöÁü•
          addNotification({
            type: 'warning',
            title: `üí¨ „ÅÇ„Å™„Åü„Åå„É°„É≥„Ç∑„Éß„É≥„Åï„Çå„Åæ„Åó„Åü - #${channelName}`,
            message: `${senderName}: ${message.content.substring(0, 100)}${message.content.length > 100 ? '...' : ''}`,
            autoHide: true,
            duration: 8000,
          });
        }
      }
    }
  };

  const startHealthCheck = () => {
    const checkConnection = () => {
      const connected = websocketService.isConnected();
      
      if (!connected && user) {
        console.log('üåê Global WebSocket disconnected, attempting reconnection...');
        isConnected.current = false;
        connectGlobalWebSocket();
      }
    };

    // 30Áßí„Åî„Å®„Å´„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
    const healthCheckInterval = setInterval(checkConnection, 30000);
    
    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÊôÇ„Å´„Ç§„É≥„Çø„Éº„Éê„É´„Çí„ÇØ„É™„Ç¢
    return () => {
      clearInterval(healthCheckInterval);
    };
  };

  return (
    <GlobalWebSocketContext.Provider value={{}}>
      {children}
    </GlobalWebSocketContext.Provider>
  );
}

export function useGlobalWebSocket(): GlobalWebSocketContextType {
  const context = useContext(GlobalWebSocketContext);
  if (context === undefined) {
    throw new Error('useGlobalWebSocket must be used within a GlobalWebSocketProvider');
  }
  return context;
}